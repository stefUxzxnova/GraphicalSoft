using Draw.src.Model;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace Draw
{
    ///NEW
	/// <summary>
	/// Върху главната форма е поставен потребителски контрол,
	/// в който се осъществява визуализацията
	/// </summary>
	public partial class MainForm : Form
    {
        /// <summary>
        /// Агрегирания диалогов процесор във формата улеснява манипулацията на модела.
        /// </summary>
        private DialogProcessor dialogProcessor = new DialogProcessor();
       
        //точки, които ще използваме за нашия Custom Rectangle
        private PointF startPoint;
        private PointF lastPoint;
        private Shape shape;

        public MainForm()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Изход от програмата. Затваря главната форма, а с това и програмата.
        /// </summary>
        void ExitToolStripMenuItemClick(object sender, EventArgs e)
        {
            Close();
        }

        /// <summary>
        /// Събитието, което се прихваща, за да се превизуализира при изменение на модела.
        /// </summary>
        void ViewPortPaint(object sender, PaintEventArgs e)
        {
            dialogProcessor.ReDraw(sender, e);
        }

        /// <summary>
        /// Бутон, който поставя на произволно място правоъгълник със зададените размери.
        /// Променя се лентата със състоянието и се инвалидира контрола, в който визуализираме.
        /// </summary>
       
        void DrawRectangleSpeedButtonClick(object sender, EventArgs e)
        {
            dialogProcessor.AddRandomRectangle();

            statusBar.Items[0].Text = "Последно действие: Рисуване на правоъгълник";

            viewPort.Invalidate();
        }

        /// <summary>
        /// Бутон, който поставя на произволно място елипса със зададените размери.
        /// Променя се лентата със състоянието и се инвалидира контрола, в който визуализираме.
        /// </summary>

        private void addElipse_button_Click(object sender, EventArgs e)
        {

            dialogProcessor.AddRandomElipse();

            statusBar.Items[0].Text = "Последно действие: Рисуване на елипса";

            viewPort.Invalidate(); //kontrol ot windows form
        }
        /// <summary>
        /// Бутон, който поставя на произволно място звезда със зададените размери.
        /// Променя се лентата със състоянието и се инвалидира контрола, в който визуализираме.
        /// </summary>

        private void addStar_button_Click(object sender, EventArgs e)
        {
            dialogProcessor.AddRandomStar();

            statusBar.Items[0].Text = "Последно действие: Рисуване на star";

            viewPort.Invalidate(); //kontrol ot windows form
        }

        /// <summary>
        /// Бутон, който поставя на произволно място кръг със зададените размери.
        /// Променя се лентата със състоянието и се инвалидира контрола, в който визуализираме.
        /// </summary>
        private void DrawCircleToolStripButton_Click(object sender, EventArgs e)
        {
            dialogProcessor.AddRandomCircle();

            statusBar.Items[0].Text = "Последно действие: Рисуване на кръг";

            viewPort.Invalidate(); //kontrol ot windows form
        }

        /// <summary>
        /// Бутон, който поставя на произволно място кръг със зададените размери.
        /// Променя се лентата със състоянието и се инвалидира контрола, в който визуализираме.
        /// </summary>
        private void AddPointToolStripButton2_Click(object sender, EventArgs e)
        {
            dialogProcessor.AddRandomPoint();

            statusBar.Items[0].Text = "Последно действие: Рисуване на точка";

            viewPort.Invalidate();
        }

        /// <summary>
        /// Бутон, който поставя на произволно място линия със зададените размери.
        /// Променя се лентата със състоянието и се инвалидира контрола, в който визуализираме.
        /// </summary>
        private void drawLineToolStripButton2_Click(object sender, EventArgs e)
        {
            dialogProcessor.AddRandomLine();

            statusBar.Items[0].Text = "Последно действие: Рисуване на точка";

            viewPort.Invalidate();

        }

        /// <summary>
        /// Прихващане на координатите при натискането на бутон на мишката и проверка (в обратен ред) дали не е
        /// щракнато върху елемент. Ако е така то той се отбелязва като селектиран и започва процес на "влачене".
        /// Промяна на статуса и инвалидиране на контрола, в който визуализираме.
        /// Реализацията се диалогът с потребителя, при който се избира "най-горния" елемент от екрана.
        /// </summary>
        void ViewPortMouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            // проверяваме дали бутона за селекция е натиснат
            if (pickUpSpeedButton.Checked) {
                //ако е натиснат бутона за AddRandomRectangle или AddCustomElipse ги изключваме
                AddCustomRectangleToolStripButton2.Checked = false;
                AddCustomElipse.Checked = false;


                var temp = dialogProcessor.ContainsPoint(e.Location);
                
                if (temp != null)
                {
                    if (dialogProcessor.Selection.Contains(temp))
                    {
                        dialogProcessor.Selection.Remove(temp);
                    }
                    else
                    {
                        dialogProcessor.Selection.Add(temp);
                    }
                    statusBar.Items[0].Text = "Последно действие: Селекция на примитив";
                    dialogProcessor.IsDragging = true;
                    dialogProcessor.LastLocation = e.Location;
                    viewPort.Invalidate();
                }
            }
            if (AddCustomRectangleToolStripButton2.Checked)
            {
                //ако е натиснат бутона за AddCustomElipse го изключваме
                AddCustomElipse.Checked = false;
                dialogProcessor.IsDragging = true;
                //start point -> точката, в която е натисната мишката
                startPoint = e.Location;
                //инициализираме динамичния правоъгълник
                shape = new RectangleShape(new RectangleF(startPoint.X, startPoint.Y, 0, 0));
                shape.FillColor = Color.White;
                dialogProcessor.AddToShapeList(shape);
            }
            if (AddCustomElipse.Checked)
            {
                dialogProcessor.IsDragging = true;
                //start point -> точката, в която е натисната мишката
                startPoint = e.Location;
                shape = new ElipseShape(new RectangleF(startPoint.X, startPoint.Y, startPoint.X, startPoint.Y));
                shape.FillColor = Color.White;
                dialogProcessor.AddToShapeList(shape);
            }

        }

        /// <summary>
        /// Прихващане на преместването на мишката.
        /// Ако сме в режм на "влачене", то избрания елемент се транслира.
        /// </summary>
        void ViewPortMouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (dialogProcessor.IsDragging && pickUpSpeedButton.Checked == true) {
                if (dialogProcessor.Selection != null) statusBar.Items[0].Text = "Последно действие: Влачене";
                dialogProcessor.TranslateTo(e.Location);
                viewPort.Invalidate();
            }
            if (AddCustomRectangleToolStripButton2.Checked && dialogProcessor.IsDragging == true)
            {
                //докато мишката се движи, lastPoint се променя
                lastPoint = e.Location;
                dialogProcessor.ManageCustomRectangle(shape, startPoint, lastPoint);
                viewPort.Invalidate();
            }
            //проверяваме дали е натиснат бутона за CustomRectangle или бутона за CustomLine и дали сме в режим на влачене
            if (AddCustomElipse.Checked && dialogProcessor.IsDragging == true)
            {
                //докато мишката се движи, lastPoint се променя
                lastPoint = e.Location;
                dialogProcessor.ManageCustomRectangle(shape, startPoint, lastPoint);
                viewPort.Invalidate();
            }
            
            
        }

        /// <summary>
        /// Прихващане на отпускането на бутона на мишката.
        /// Излизаме от режим "влачене".
        /// </summary>
        void ViewPortMouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            dialogProcessor.IsDragging = false;
            if ((AddCustomRectangleToolStripButton2.Checked || AddCustomElipse.Checked) && dialogProcessor.IsDragging == true)
            {
                dialogProcessor.IsDragging = false;
                //окончателно lastPoint
                lastPoint = e.Location;
            }
        }

        //Сменяме цвета на контура на избран примитив
        private void button1_Click_1(object sender, EventArgs e)
        {
            statusBar.Items[0].Text = "Последно действие: Промяна на цвета на контура";
            if (colorDialog1.ShowDialog() == DialogResult.OK) //dialog result -> можем да хванем какво е кликнал потребителя
            {
                dialogProcessor.SetStrokeColor(colorDialog1.Color);
            }
            viewPort.Invalidate();
        }


        //Смяна на цвета на избран примитив
        private void toolStripButton1_Click_1(object sender, EventArgs e)
        {
            statusBar.Items[0].Text = "Последно действие: Промяна на цвета на избрания примитив";
            if (colorDialog1.ShowDialog() == DialogResult.OK)
            {
                dialogProcessor.SetFillColor(colorDialog1.Color);
            }
            viewPort.Invalidate();
        }

        //Промяна на дебелината на контура на избран примитив с trackBar 
        //Стойността на trackBar се предава на numericUpDown1 и се изписва
        private void trackBar1_Scroll(object sender, EventArgs e)
        {
            numericUpDown1.Value = trackBar1.Value;
            statusBar.Items[0].Text = "Последно действие: Промяна на дебелината на контура";
            dialogProcessor.SetContourWidth(trackBar1.Value);
            viewPort.Invalidate();
        }

        //Промяна на дебелината на контура на избран примитив с numericUpDown
        private void numericUpDown1_ValueChanged(object sender, EventArgs e)
        {
            statusBar.Items[0].Text = "Последно действие: Промяна на дебелината на контура";
            dialogProcessor.SetContourWidth((float)numericUpDown1.Value);
            viewPort.Invalidate();
        }

        //Промяна на прозрачността на избран примитив с trackBar
        private void trackBar2_Scroll(object sender, EventArgs e)
        {
            dialogProcessor.SetOpacity((int)trackBar2.Value);
            viewPort.Invalidate();
        }

        //неизползваем
        private void AddCustomRectangleToolStripButton2_Click(object sender, EventArgs e)
        {

        }

        private void groupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            dialogProcessor.GroupPrimitive();
            statusBar.Items[0].Text = "Последно действие: Групиране";
            viewPort.Invalidate();
        }
    }
}
