using System;
using System.Drawing;
using System.Drawing.Drawing2D;

namespace Draw
{
	/// <summary>
	/// Класът правоъгълник е основен примитив, който е наследник на базовия Shape.
	/// </summary>
	public class RectangleShape : Shape
	{
		#region Constructor
		
		public RectangleShape(RectangleF rect) : base(rect)
		{
		}
		
		public RectangleShape(RectangleShape rectangle) : base(rectangle)
		{
		}
		
		#endregion

		/// <summary> 
		/// proba
		/// Проверка за принадлежност на точка point към правоъгълника.
		/// В случая на правоъгълник този метод може да не бъде пренаписван, защото
		/// Реализацията съвпада с тази на абстрактния клас Shape, който проверява
		/// дали точката е в обхващащия правоъгълник на елемента (а той съвпада с
		/// елемента в този случай).
		/// </summary>
		public override bool Contains(PointF point)
		{
			if (base.Contains(point))
				// Проверка дали е в обекта само, ако точката е в обхващащия правоъгълник.
				// В случая на правоъгълник - директно връщаме true
				return true;
			else
				// Ако не е в обхващащия правоъгълник, то неможе да е в обекта и => false
				return false;
		}
		
		/// <summary>
		/// Частта, визуализираща конкретния примитив.
		/// </summary>
		public override void DrawSelf(Graphics grfx)
		{
            //base.DrawSelf(grfx);
            //var state = grfx.Save();//правим всякви промени

            //grfx.Transform = TransformationMatrix;
            //FillColor = Color.FromArgb(
            //    Opacity,
            //    FillColor.R,
            //    FillColor.G,
            //    FillColor.B)
            //;

            //grfx.FillRectangle(new SolidBrush(FillColor), Rectangle.X, Rectangle.Y, Rectangle.Width, Rectangle.Height);
            //grfx.DrawRectangle(new Pen(StrokeColor, ContourWidth), Rectangle.X, Rectangle.Y, Rectangle.Width, Rectangle.Height);

            ////grfx.Restore(state);
            //grfx.ResetTransform();


            base.DrawSelf(grfx);
            base.RotateShape(grfx);

            FillColor = Color.FromArgb(
                Opacity,
                FillColor.R,
                FillColor.G,
                FillColor.B)
            ;

            // Draw the transformed rectangle
            grfx.FillRectangle(new SolidBrush(FillColor), Rectangle.X, Rectangle.Y, Rectangle.Width, Rectangle.Height);
            grfx.DrawRectangle(new Pen(StrokeColor, ContourWidth), Rectangle.X, Rectangle.Y, Rectangle.Width, Rectangle.Height);

            // Restore the initial state of the graphics object
            grfx.ResetTransform();
        }
    }
}
